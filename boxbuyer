local houseInteriors = workspace:FindFirstChild("HouseInteriors")
if not houseInteriors then
    warn("HouseInteriors folder not found!")
    return
end

local sourceFolder = houseInteriors:FindFirstChild("furniture")
if not sourceFolder then
    warn("furniture folder not found!")
    return
end

local blueprint = houseInteriors:FindFirstChild("blueprint")
if not blueprint then
    warn("blueprint folder not found!")
    return
end

local myHouse = blueprint:FindFirstChild("ScarletShifter8835")
if not myHouse then
    warn("Your house was not found!")
    return
end

-- Set this to your house's position (use GetPivot().Position if needed)
local startPosition = Vector3.new(0, 5, 0)
local offset = Vector3.new(6, 0, 0)
local i = 0

-- Recursively find all Models in all subfolders
local function findAllModels(folder, models)
    for _, obj in ipairs(folder:GetChildren()) do
        if obj:IsA("Model") then
            table.insert(models, obj)
        elseif obj:IsA("Folder") then
            findAllModels(obj, models)
        end
    end
end

local modelsToMove = {}
findAllModels(sourceFolder, modelsToMove)

if #modelsToMove == 0 then
    warn("No models found in furniture folder!")
    return
end

for _, item in ipairs(modelsToMove) do
    item.Parent = myHouse
    -- Set PrimaryPart if not set
    if not item.PrimaryPart then
        local primary = item:FindFirstChildWhichIsA("BasePart")
        if primary then
            item.PrimaryPart = primary
        else
            print("No BasePart found in", item.Name)
        end
    end
    -- Place the item at a new position
    if item.PrimaryPart then
        item:SetPrimaryPartCFrame(CFrame.new(startPosition + offset * i))
        item.PrimaryPart.Anchored = true
        print("Placed", item.Name, "at", (startPosition + offset * i))
        i = i + 1
    else
        print("Could not place", item.Name, "because it has no PrimaryPart")
    end
end

print("Placed", #modelsToMove, "furniture items in your house!")
